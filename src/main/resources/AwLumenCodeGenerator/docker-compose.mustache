version: '2'

services:
  ### Beanstalkd Container ####################################
  beanstalkd:
    image: jonbaldie/beanstalkd
    container_name: beanstalkd.{{{appName}}}.dev
    ports:
      - "11300:11300"
    networks:
      - backend

  ### Redis Container #########################################
  redis:
    image: redis:alpine
    container_name: redis.{{{appName}}}.dev
    volumes:
      - ./containers/redis-data:/data
    networks:
      - backend


  ### MySQL Container #########################################
  mysql:
    image: mysql:latest
    container_name: mysql.{{{appName}}}.dev
    volumes:
      - ./containers/mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_USER: root
      MYSQL_DATABASE: core
    networks:
      - backend

  ### MongoDB Container #######################################
  mongo:
    image: mongo:latest
    container_name: mongo.{{{appName}}}.dev
    ports:
      - "27017:27017"
    volumes:
      - ./containers/mongo-data:/data/db
    networks:
      - backend


  # The Application
  php_command:
    # image: php:7.1-apache
    container_name: core.{{{appName}}}.dev
    build:
      dockerfile: Dockerfile.php7
    ports:
      - "8081:80"
      - "4301:443"
    volumes:
      - ./src/core:/var/www/html
      - ./containers/logs/core:/var/log/apache2
    networks:
      - frontend
      - backend

  php_query:
    # image: php:7.1-apache
    container_name: query.{{{appName}}}.dev
    build:
      context: ./php7
      dockerfile: Dockerfile.php7
    ports:
      - "8082:80"
      - "4302:443"
    volumes:
      - ./src/query:/var/www/html
      - ./containers/logs/query:/var/log/apache2
    networks:
      - frontend
      - backend

  php_frontend:
    # image: php:7.1-apache
    container_name: app.{{{appName}}}.dev
    build:
      context: ./php7
      dockerfile: Dockerfile.php7
    ports:
      - "8083:80"
      - "4303:443"
    volumes:
      - ./src/frontend:/var/www/html
      - ./containers/logs/frontend:/var/log/apache2
    networks:
      - frontend
      - backend


### Networks Setup ############################################
networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"

volumes:
  redis-data:
    driver: "local"
  mysql-data:
    driver: "local"
  mongo-data:
    driver: "local"
